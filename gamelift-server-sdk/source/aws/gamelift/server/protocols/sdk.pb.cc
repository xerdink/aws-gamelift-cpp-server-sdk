// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeValue_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameProperty_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameSession_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Player_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSession_sdk_2eproto;
namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
class GameLiftResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameLiftResponse> _instance;
} _GameLiftResponse_default_instance_;
class GamePropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameProperty> _instance;
} _GameProperty_default_instance_;
class GameSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSession> _instance;
} _GameSession_default_instance_;
class AttributeValue_SDMEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeValue_SDMEntry_DoNotUse> _instance;
} _AttributeValue_SDMEntry_DoNotUse_default_instance_;
class AttributeValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeValue> _instance;
} _AttributeValue_default_instance_;
class Player_PlayerAttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player_PlayerAttributesEntry_DoNotUse> _instance;
} _Player_PlayerAttributesEntry_DoNotUse_default_instance_;
class Player_LatencyInMsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player_LatencyInMsEntry_DoNotUse> _instance;
} _Player_LatencyInMsEntry_DoNotUse_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class PlayerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerSession> _instance;
} _PlayerSession_default_instance_;
class UpdateGameSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGameSession> _instance;
} _UpdateGameSession_default_instance_;
class TerminateProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerminateProcess> _instance;
} _TerminateProcess_default_instance_;
class ActivateGameSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivateGameSession> _instance;
} _ActivateGameSession_default_instance_;
class ProcessReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessReady> _instance;
} _ProcessReady_default_instance_;
class ProcessEndingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessEnding> _instance;
} _ProcessEnding_default_instance_;
class ReportHealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportHealth> _instance;
} _ReportHealth_default_instance_;
class GameSessionActivateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSessionActivate> _instance;
} _GameSessionActivate_default_instance_;
class GameSessionTerminateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSessionTerminate> _instance;
} _GameSessionTerminate_default_instance_;
class UpdatePlayerSessionCreationPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerSessionCreationPolicy> _instance;
} _UpdatePlayerSessionCreationPolicy_default_instance_;
class AcceptPlayerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptPlayerSession> _instance;
} _AcceptPlayerSession_default_instance_;
class RemovePlayerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePlayerSession> _instance;
} _RemovePlayerSession_default_instance_;
class DescribePlayerSessionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribePlayerSessionsRequest> _instance;
} _DescribePlayerSessionsRequest_default_instance_;
class BackfillMatchmakingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackfillMatchmakingRequest> _instance;
} _BackfillMatchmakingRequest_default_instance_;
class StopMatchmakingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopMatchmakingRequest> _instance;
} _StopMatchmakingRequest_default_instance_;
class GetInstanceCertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstanceCertificate> _instance;
} _GetInstanceCertificate_default_instance_;
class BackfillMatchmakingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackfillMatchmakingResponse> _instance;
} _BackfillMatchmakingResponse_default_instance_;
class DescribePlayerSessionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribePlayerSessionsResponse> _instance;
} _DescribePlayerSessionsResponse_default_instance_;
class GetInstanceCertificateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstanceCertificateResponse> _instance;
} _GetInstanceCertificateResponse_default_instance_;
}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com
static void InitDefaultsscc_info_AcceptPlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AcceptPlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptPlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptPlayerSession_sdk_2eproto}, {}};

static void InitDefaultsscc_info_ActivateGameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ActivateGameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActivateGameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActivateGameSession_sdk_2eproto}, {
      &scc_info_GameSession_sdk_2eproto.base,}};

static void InitDefaultsscc_info_AttributeValue_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeValue_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttributeValue_sdk_2eproto}, {
      &scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto.base,}};

static void InitDefaultsscc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_SDMEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_BackfillMatchmakingRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackfillMatchmakingRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BackfillMatchmakingRequest_sdk_2eproto}, {
      &scc_info_Player_sdk_2eproto.base,}};

static void InitDefaultsscc_info_BackfillMatchmakingResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackfillMatchmakingResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackfillMatchmakingResponse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_DescribePlayerSessionsRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DescribePlayerSessionsRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DescribePlayerSessionsRequest_sdk_2eproto}, {}};

static void InitDefaultsscc_info_DescribePlayerSessionsResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribePlayerSessionsResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribePlayerSessionsResponse_sdk_2eproto}, {
      &scc_info_PlayerSession_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameLiftResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameLiftResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameLiftResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameLiftResponse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameProperty_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameProperty_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameProperty_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameProperty_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameSession_sdk_2eproto}, {
      &scc_info_GameProperty_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameSessionActivate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionActivate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSessionActivate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameSessionActivate_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameSessionTerminate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionTerminate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSessionTerminate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameSessionTerminate_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GetInstanceCertificate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstanceCertificate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInstanceCertificate_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GetInstanceCertificateResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificateResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstanceCertificateResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInstanceCertificateResponse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_Player_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Player_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Player_sdk_2eproto}, {
      &scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto.base,
      &scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto.base,}};

static void InitDefaultsscc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_LatencyInMsEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_PlayerAttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto}, {
      &scc_info_AttributeValue_sdk_2eproto.base,}};

static void InitDefaultsscc_info_PlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_PlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerSession_sdk_2eproto}, {}};

static void InitDefaultsscc_info_ProcessEnding_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ProcessEnding_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessEnding_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessEnding_sdk_2eproto}, {}};

static void InitDefaultsscc_info_ProcessReady_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ProcessReady_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessReady_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessReady_sdk_2eproto}, {}};

static void InitDefaultsscc_info_RemovePlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_RemovePlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePlayerSession_sdk_2eproto}, {}};

static void InitDefaultsscc_info_ReportHealth_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ReportHealth_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportHealth_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportHealth_sdk_2eproto}, {}};

static void InitDefaultsscc_info_StopMatchmakingRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_StopMatchmakingRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopMatchmakingRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopMatchmakingRequest_sdk_2eproto}, {}};

static void InitDefaultsscc_info_TerminateProcess_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_TerminateProcess_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerminateProcess_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TerminateProcess_sdk_2eproto}, {}};

static void InitDefaultsscc_info_UpdateGameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_UpdateGameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateGameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateGameSession_sdk_2eproto}, {
      &scc_info_GameSession_sdk_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_UpdatePlayerSessionCreationPolicy_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdk_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sdk_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, status_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, responsedata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, errormessage_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, name_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, joinable_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gameproperties_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, port_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gamesessiondata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, matchmakerdata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, dnsname_),
  0,
  1,
  2,
  7,
  8,
  ~0u,
  9,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, type_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, s_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, n_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, sl_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, sdm_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, playerattributes_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, team_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, latencyinms_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, status_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, creationtime_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, terminationtime_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, port_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playerdata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, dnsname_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, gamesession_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, updatereason_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, backfillticketid_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess, terminationtime_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession, gamesession_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, logpathstoupload_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, port_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth, healthstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, maxplayers_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate, gamesessionid_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, newplayersessioncreationpolicy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, playersessionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, playersessionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playersessionstatusfilter_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, ticketid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, gamesessionarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, matchmakingconfigurationarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, players_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, ticketid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, gamesessionarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, matchmakingconfigurationarn_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse, ticketid_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, playersessions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, certificatepath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, certificatechainpath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, privatekeypath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, hostname_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse)},
  { 11, 18, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty)},
  { 20, 36, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSession)},
  { 47, 54, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse)},
  { 56, 66, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue)},
  { 71, 78, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse)},
  { 80, 87, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse)},
  { 89, 98, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player)},
  { 102, 118, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession)},
  { 129, 137, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession)},
  { 140, 146, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess)},
  { 147, 153, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession)},
  { 154, 161, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady)},
  { 163, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding)},
  { 168, 174, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth)},
  { 175, 182, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate)},
  { 184, 190, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate)},
  { 191, 198, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy)},
  { 200, 207, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession)},
  { 209, 216, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession)},
  { 218, 229, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest)},
  { 235, 244, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest)},
  { 248, 256, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest)},
  { 259, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate)},
  { 264, 270, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse)},
  { 271, 278, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse)},
  { 280, 289, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameLiftResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_SDMEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_PlayerAttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_LatencyInMsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_PlayerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_UpdateGameSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_TerminateProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ActivateGameSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ProcessReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ProcessEnding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ReportHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionActivate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionTerminate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_UpdatePlayerSessionCreationPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AcceptPlayerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_RemovePlayerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_StopMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificateResponse_default_instance_),
};

const char descriptor_table_protodef_sdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsdk.proto\022&com.amazon.whitewater.auxpr"
  "oxy.pbuffer\"\216\001\n\020GameLiftResponse\022N\n\006stat"
  "us\030\001 \001(\0162>.com.amazon.whitewater.auxprox"
  "y.pbuffer.GameLiftResponseStatus\022\024\n\014resp"
  "onseData\030\002 \001(\t\022\024\n\014errorMessage\030\003 \001(\t\"*\n\014"
  "GameProperty\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  "\"\247\002\n\013GameSession\022\025\n\rgameSessionId\030\001 \001(\t\022"
  "\017\n\007fleetId\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\025\n\nmaxPla"
  "yers\030\004 \001(\005:\0010\022\027\n\010joinable\030\005 \001(\010:\005false\022L"
  "\n\016gameProperties\030\006 \003(\01324.com.amazon.whit"
  "ewater.auxproxy.pbuffer.GameProperty\022\017\n\004"
  "port\030\007 \001(\005:\0010\022\021\n\tipAddress\030\010 \001(\t\022\027\n\017game"
  "SessionData\030\t \001(\t\022\026\n\016matchmakerData\030\n \001("
  "\t\022\017\n\007dnsName\030\013 \001(\t\"\300\001\n\016AttributeValue\022\017\n"
  "\004type\030\001 \001(\005:\0010\022\t\n\001S\030\002 \001(\t\022\014\n\001N\030\003 \001(\001:\0010\022"
  "\n\n\002SL\030\004 \003(\t\022L\n\003SDM\030\005 \003(\0132\?.com.amazon.wh"
  "itewater.auxproxy.pbuffer.AttributeValue"
  ".SDMEntry\032*\n\010SDMEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\001:\0028\001\"\203\003\n\006Player\022\020\n\010playerId\030\001 \001"
  "(\t\022^\n\020playerAttributes\030\002 \003(\0132D.com.amazo"
  "n.whitewater.auxproxy.pbuffer.Player.Pla"
  "yerAttributesEntry\022\014\n\004team\030\003 \001(\t\022T\n\013late"
  "ncyInMs\030\004 \003(\0132\?.com.amazon.whitewater.au"
  "xproxy.pbuffer.Player.LatencyInMsEntry\032o"
  "\n\025PlayerAttributesEntry\022\013\n\003key\030\001 \001(\t\022E\n\005"
  "value\030\002 \001(\01326.com.amazon.whitewater.auxp"
  "roxy.pbuffer.AttributeValue:\0028\001\0322\n\020Laten"
  "cyInMsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:"
  "\0028\001\"\360\001\n\rPlayerSession\022\027\n\017playerSessionId"
  "\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\t\022\025\n\rgameSessionI"
  "d\030\003 \001(\t\022\017\n\007fleetId\030\004 \001(\t\022\021\n\tipAddress\030\005 "
  "\001(\t\022\016\n\006status\030\006 \001(\t\022\027\n\014creationTime\030\007 \001("
  "\003:\0010\022\032\n\017terminationTime\030\010 \001(\003:\0010\022\017\n\004port"
  "\030\t \001(\005:\0010\022\022\n\nplayerData\030\n \001(\t\022\017\n\007dnsName"
  "\030\013 \001(\t\"\215\001\n\021UpdateGameSession\022H\n\013gameSess"
  "ion\030\001 \001(\01323.com.amazon.whitewater.auxpro"
  "xy.pbuffer.GameSession\022\024\n\014updateReason\030\002"
  " \001(\t\022\030\n\020backfillTicketId\030\003 \001(\t\".\n\020Termin"
  "ateProcess\022\032\n\017terminationTime\030\001 \001(\003:\0010\"_"
  "\n\023ActivateGameSession\022H\n\013gameSession\030\001 \001"
  "(\01323.com.amazon.whitewater.auxproxy.pbuf"
  "fer.GameSession\"9\n\014ProcessReady\022\030\n\020logPa"
  "thsToUpload\030\001 \003(\t\022\017\n\004port\030\002 \001(\005:\0010\"\017\n\rPr"
  "ocessEnding\"$\n\014ReportHealth\022\024\n\014healthSta"
  "tus\030\001 \002(\010\"C\n\023GameSessionActivate\022\025\n\rgame"
  "SessionId\030\001 \001(\t\022\025\n\nmaxPlayers\030\002 \001(\005:\0010\"-"
  "\n\024GameSessionTerminate\022\025\n\rgameSessionId\030"
  "\001 \001(\t\"b\n!UpdatePlayerSessionCreationPoli"
  "cy\022\025\n\rgameSessionId\030\001 \001(\t\022&\n\036newPlayerSe"
  "ssionCreationPolicy\030\002 \001(\t\"E\n\023AcceptPlaye"
  "rSession\022\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017playe"
  "rSessionId\030\002 \001(\t\"E\n\023RemovePlayerSession\022"
  "\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017playerSessionI"
  "d\030\002 \001(\t\"\251\001\n\035DescribePlayerSessionsReques"
  "t\022\025\n\rgameSessionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001"
  "(\t\022\027\n\017playerSessionId\030\003 \001(\t\022!\n\031playerSes"
  "sionStatusFilter\030\004 \001(\t\022\021\n\tnextToken\030\005 \001("
  "\t\022\020\n\005limit\030\006 \001(\005:\0010\"\254\001\n\032BackfillMatchmak"
  "ingRequest\022\020\n\010ticketId\030\001 \001(\t\022\026\n\016gameSess"
  "ionArn\030\002 \001(\t\022#\n\033matchmakingConfiguration"
  "Arn\030\003 \001(\t\022\?\n\007players\030\004 \003(\0132..com.amazon."
  "whitewater.auxproxy.pbuffer.Player\"g\n\026St"
  "opMatchmakingRequest\022\020\n\010ticketId\030\001 \001(\t\022\026"
  "\n\016gameSessionArn\030\002 \001(\t\022#\n\033matchmakingCon"
  "figurationArn\030\003 \001(\t\"\030\n\026GetInstanceCertif"
  "icate\"/\n\033BackfillMatchmakingResponse\022\020\n\010"
  "ticketId\030\001 \001(\t\"\202\001\n\036DescribePlayerSession"
  "sResponse\022\021\n\tnextToken\030\001 \001(\t\022M\n\016playerSe"
  "ssions\030\002 \003(\01325.com.amazon.whitewater.aux"
  "proxy.pbuffer.PlayerSession\"\201\001\n\036GetInsta"
  "nceCertificateResponse\022\027\n\017certificatePat"
  "h\030\001 \001(\t\022\034\n\024certificateChainPath\030\002 \001(\t\022\026\n"
  "\016privateKeyPath\030\003 \001(\t\022\020\n\010hostName\030\004 \001(\t*"
  "Y\n\026GameLiftResponseStatus\022\006\n\002OK\020\000\022\r\n\tERR"
  "OR_400\020\001\022\r\n\tERROR_500\020\002\022\031\n\014UNRECOGNIZED\020"
  "\377\377\377\377\377\377\377\377\377\001B&\n\037com.amazonaws.services.gam"
  "eliftB\003Sdk"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdk_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sdk_2eproto_sccs[27] = {
  &scc_info_AcceptPlayerSession_sdk_2eproto.base,
  &scc_info_ActivateGameSession_sdk_2eproto.base,
  &scc_info_AttributeValue_sdk_2eproto.base,
  &scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto.base,
  &scc_info_BackfillMatchmakingRequest_sdk_2eproto.base,
  &scc_info_BackfillMatchmakingResponse_sdk_2eproto.base,
  &scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base,
  &scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base,
  &scc_info_GameLiftResponse_sdk_2eproto.base,
  &scc_info_GameProperty_sdk_2eproto.base,
  &scc_info_GameSession_sdk_2eproto.base,
  &scc_info_GameSessionActivate_sdk_2eproto.base,
  &scc_info_GameSessionTerminate_sdk_2eproto.base,
  &scc_info_GetInstanceCertificate_sdk_2eproto.base,
  &scc_info_GetInstanceCertificateResponse_sdk_2eproto.base,
  &scc_info_Player_sdk_2eproto.base,
  &scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto.base,
  &scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto.base,
  &scc_info_PlayerSession_sdk_2eproto.base,
  &scc_info_ProcessEnding_sdk_2eproto.base,
  &scc_info_ProcessReady_sdk_2eproto.base,
  &scc_info_RemovePlayerSession_sdk_2eproto.base,
  &scc_info_ReportHealth_sdk_2eproto.base,
  &scc_info_StopMatchmakingRequest_sdk_2eproto.base,
  &scc_info_TerminateProcess_sdk_2eproto.base,
  &scc_info_UpdateGameSession_sdk_2eproto.base,
  &scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2eproto = {
  false, false, descriptor_table_protodef_sdk_2eproto, "sdk.proto", 3050,
  &descriptor_table_sdk_2eproto_once, descriptor_table_sdk_2eproto_sccs, descriptor_table_sdk_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_sdk_2eproto::offsets,
  file_level_metadata_sdk_2eproto, 27, file_level_enum_descriptors_sdk_2eproto, file_level_service_descriptors_sdk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sdk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sdk_2eproto)), true);
namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameLiftResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2eproto);
  return file_level_enum_descriptors_sdk_2eproto[0];
}
bool GameLiftResponseStatus_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameLiftResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GameLiftResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_responsedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameLiftResponse::GameLiftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}
GameLiftResponse::GameLiftResponse(const GameLiftResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  responsedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_responsedata()) {
    responsedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responsedata(), 
      GetArena());
  }
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errormessage()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}

void GameLiftResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameLiftResponse_sdk_2eproto.base);
  responsedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

GameLiftResponse::~GameLiftResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameLiftResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  responsedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameLiftResponse::ArenaDtor(void* object) {
  GameLiftResponse* _this = reinterpret_cast< GameLiftResponse* >(object);
  (void)_this;
}
void GameLiftResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameLiftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLiftResponse& GameLiftResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameLiftResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameLiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      responsedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      errormessage_.ClearNonDefaultToEmpty();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameLiftResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponseStatus_IsValid(val))) {
            _internal_set_status(static_cast<::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponseStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string responseData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_responsedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameLiftResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponseStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string responseData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_responsedata().data(), static_cast<int>(this->_internal_responsedata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_responsedata(), target);
  }

  // optional string errorMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return target;
}

size_t GameLiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string responseData = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_responsedata());
    }

    // optional string errorMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormessage());
    }

    // optional .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponseStatus status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLiftResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLiftResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameLiftResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    MergeFrom(*source);
  }
}

void GameLiftResponse::MergeFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_responsedata(from._internal_responsedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_errormessage(from._internal_errormessage());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameLiftResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLiftResponse::CopyFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLiftResponse::IsInitialized() const {
  return true;
}

void GameLiftResponse::InternalSwap(GameLiftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  responsedata_.Swap(&other->responsedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameLiftResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<GameProperty>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameProperty::GameProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}
GameProperty::GameProperty(const GameProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

void GameProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameProperty_sdk_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameProperty::~GameProperty() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameProperty::ArenaDtor(void* object) {
  GameProperty* _this = reinterpret_cast< GameProperty* >(object);
  (void)_this;
}
void GameProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameProperty& GameProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameProperty_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return target;
}

size_t GameProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GameProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    MergeFrom(*source);
  }
}

void GameProperty::MergeFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void GameProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperty::CopyFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProperty::IsInitialized() const {
  return true;
}

void GameProperty::InternalSwap(GameProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameSession::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSession>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fleetid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maxplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_joinable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gamesessiondata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matchmakerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dnsname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GameSession::GameSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gameproperties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}
GameSession::GameSession(const GameSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gameproperties_(from.gameproperties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fleetid()) {
    fleetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fleetid(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress()) {
    ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress(), 
      GetArena());
  }
  gamesessiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessiondata()) {
    gamesessiondata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessiondata(), 
      GetArena());
  }
  matchmakerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_matchmakerdata()) {
    matchmakerdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matchmakerdata(), 
      GetArena());
  }
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dnsname()) {
    dnsname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dnsname(), 
      GetArena());
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

void GameSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maxplayers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
}

GameSession::~GameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSession::ArenaDtor(void* object) {
  GameSession* _this = reinterpret_cast< GameSession* >(object);
  (void)_this;
}
void GameSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSession& GameSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameproperties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fleetid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ipaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      gamesessiondata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      matchmakerdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      dnsname_.ClearNonDefaultToEmpty();
    }
  }
  maxplayers_ = 0;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&joinable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&joinable_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fleetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fleetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxPlayers = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maxplayers(&has_bits);
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool joinable = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_joinable(&has_bits);
          joinable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameproperties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 port = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipAddress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameSessionData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_gamesessiondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string matchmakerData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_matchmakerdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dnsName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dnsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional string fleetId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fleetid().data(), static_cast<int>(this->_internal_fleetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fleetid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional int32 maxPlayers = 4 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxplayers(), target);
  }

  // optional bool joinable = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_joinable(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameproperties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_gameproperties(i), target, stream);
  }

  // optional int32 port = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_port(), target);
  }

  // optional string ipAddress = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ipaddress(), target);
  }

  // optional string gameSessionData = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessiondata().data(), static_cast<int>(this->_internal_gamesessiondata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gamesessiondata(), target);
  }

  // optional string matchmakerData = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchmakerdata().data(), static_cast<int>(this->_internal_matchmakerdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_matchmakerdata(), target);
  }

  // optional string dnsName = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dnsname().data(), static_cast<int>(this->_internal_dnsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dnsname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return target;
}

size_t GameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  total_size += 1UL * this->_internal_gameproperties_size();
  for (const auto& msg : this->gameproperties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string fleetId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fleetid());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string ipAddress = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress());
    }

    // optional string gameSessionData = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessiondata());
    }

    // optional string matchmakerData = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchmakerdata());
    }

    // optional string dnsName = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dnsname());
    }

    // optional int32 maxPlayers = 4 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxplayers());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool joinable = 5 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 port = 7 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    MergeFrom(*source);
  }
}

void GameSession::MergeFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameproperties_.MergeFrom(from.gameproperties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fleetid(from._internal_fleetid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ipaddress(from._internal_ipaddress());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_gamesessiondata(from._internal_gamesessiondata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_matchmakerdata(from._internal_matchmakerdata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_dnsname(from._internal_dnsname());
    }
    if (cached_has_bits & 0x00000080u) {
      maxplayers_ = from.maxplayers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      joinable_ = from.joinable_;
    }
    if (cached_has_bits & 0x00000200u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSession::CopyFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSession::IsInitialized() const {
  return true;
}

void GameSession::InternalSwap(GameSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameproperties_.InternalSwap(&other->gameproperties_);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fleetid_.Swap(&other->fleetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamesessiondata_.Swap(&other->gamesessiondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchmakerdata_.Swap(&other->matchmakerdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dnsname_.Swap(&other->dnsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameSession, port_)
      + sizeof(GameSession::port_)
      - PROTOBUF_FIELD_OFFSET(GameSession, maxplayers_)>(
          reinterpret_cast<char*>(&maxplayers_),
          reinterpret_cast<char*>(&other->maxplayers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AttributeValue_SDMEntry_DoNotUse::AttributeValue_SDMEntry_DoNotUse() {}
AttributeValue_SDMEntry_DoNotUse::AttributeValue_SDMEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeValue_SDMEntry_DoNotUse::MergeFrom(const AttributeValue_SDMEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeValue_SDMEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AttributeValue_SDMEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AttributeValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeValue>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AttributeValue::AttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sl_(arena),
  sdm_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sl_(from.sl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdm_.MergeFrom(from.sdm_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArena());
  }
  ::memcpy(&n_, &from.n_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&n_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}

void AttributeValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttributeValue_sdk_2eproto.base);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&n_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&n_)) + sizeof(type_));
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttributeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AttributeValue::ArenaDtor(void* object) {
  AttributeValue* _this = reinterpret_cast< AttributeValue* >(object);
  (void)_this;
}
void AttributeValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttributeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeValue& AttributeValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeValue_sdk_2eproto.base);
  return *internal_default_instance();
}


void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sl_.Clear();
  sdm_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    s_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&n_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string S = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double N = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_n(&has_bits);
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string SL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sl();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> SDM = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sdm_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string S = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s(), target);
  }

  // optional double N = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_n(), target);
  }

  // repeated string SL = 4;
  for (int i = 0, n = this->_internal_sl_size(); i < n; i++) {
    const auto& s = this->_internal_sl(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
    target = stream->WriteString(4, s, target);
  }

  // map<string, double> SDM = 5;
  if (!this->_internal_sdm().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sdm().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sdm().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_sdm().begin();
          it != this->_internal_sdm().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AttributeValue_SDMEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_sdm().begin();
          it != this->_internal_sdm().end(); ++it) {
        target = AttributeValue_SDMEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string SL = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sl_.size());
  for (int i = 0, n = sl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sl_.Get(i));
  }

  // map<string, double> SDM = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sdm_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_sdm().begin();
      it != this->_internal_sdm().end(); ++it) {
    total_size += AttributeValue_SDMEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string S = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s());
    }

    // optional double N = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 type = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    MergeFrom(*source);
  }
}

void AttributeValue::MergeFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_.MergeFrom(from.sl_);
  sdm_.MergeFrom(from.sdm_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000002u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AttributeValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sl_.InternalSwap(&other->sl_);
  sdm_.Swap(&other->sdm_);
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeValue, type_)
      + sizeof(AttributeValue::type_)
      - PROTOBUF_FIELD_OFFSET(AttributeValue, n_)>(
          reinterpret_cast<char*>(&n_),
          reinterpret_cast<char*>(&other->n_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Player_PlayerAttributesEntry_DoNotUse::Player_PlayerAttributesEntry_DoNotUse() {}
Player_PlayerAttributesEntry_DoNotUse::Player_PlayerAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_PlayerAttributesEntry_DoNotUse::MergeFrom(const Player_PlayerAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_PlayerAttributesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Player_PlayerAttributesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Player_LatencyInMsEntry_DoNotUse::Player_LatencyInMsEntry_DoNotUse() {}
Player_LatencyInMsEntry_DoNotUse::Player_LatencyInMsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_LatencyInMsEntry_DoNotUse::MergeFrom(const Player_LatencyInMsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_LatencyInMsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Player_LatencyInMsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Player::_Internal {
 public:
  using HasBits = decltype(std::declval<Player>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playerattributes_(arena),
  latencyinms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playerid(), 
      GetArena());
  }
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team()) {
    team_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}

void Player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_sdk_2eproto.base);
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_sdk_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerattributes_.Clear();
  latencyinms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&playerattributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int32> latencyInMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&latencyinms_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  if (!this->_internal_playerattributes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_playerattributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_playerattributes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->_internal_playerattributes().begin();
          it != this->_internal_playerattributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_PlayerAttributesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->_internal_playerattributes().begin();
          it != this->_internal_playerattributes().end(); ++it) {
        target = Player_PlayerAttributesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional string team = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team().data(), static_cast<int>(this->_internal_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team(), target);
  }

  // map<string, int32> latencyInMs = 4;
  if (!this->_internal_latencyinms().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latencyinms().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latencyinms().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_latencyinms().begin();
          it != this->_internal_latencyinms().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_LatencyInMsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_latencyinms().begin();
          it != this->_internal_latencyinms().end(); ++it) {
        target = Player_LatencyInMsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerattributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
      it = this->_internal_playerattributes().begin();
      it != this->_internal_playerattributes().end(); ++it) {
    total_size += Player_PlayerAttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> latencyInMs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latencyinms_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_latencyinms().begin();
      it != this->_internal_latencyinms().end(); ++it) {
    total_size += Player_LatencyInMsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string playerId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string team = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team(from._internal_team());
    }
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerattributes_.Swap(&other->playerattributes_);
  latencyinms_.Swap(&other->latencyinms_);
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerSession::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerSession>()._has_bits_);
  static void set_has_playersessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fleetid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_terminationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_playerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dnsname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PlayerSession::PlayerSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}
PlayerSession::PlayerSession(const PlayerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playersessionid()) {
    playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersessionid(), 
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playerid(), 
      GetArena());
  }
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fleetid()) {
    fleetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fleetid(), 
      GetArena());
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress()) {
    ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  playerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerdata()) {
    playerdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playerdata(), 
      GetArena());
  }
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dnsname()) {
    dnsname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dnsname(), 
      GetArena());
  }
  ::memcpy(&creationtime_, &from.creationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

void PlayerSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerSession_sdk_2eproto.base);
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&creationtime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
}

PlayerSession::~PlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerSession::ArenaDtor(void* object) {
  PlayerSession* _this = reinterpret_cast< PlayerSession* >(object);
  (void)_this;
}
void PlayerSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSession& PlayerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void PlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      playersessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      fleetid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ipaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      playerdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      dnsname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&creationtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameSessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fleetId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fleetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 creationTime = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_creationtime(&has_bits);
          creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 terminationTime = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_terminationtime(&has_bits);
          terminationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playerdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dnsName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dnsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playersessionid(), target);
  }

  // optional string playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playerid(), target);
  }

  // optional string gameSessionId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gamesessionid(), target);
  }

  // optional string fleetId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fleetid().data(), static_cast<int>(this->_internal_fleetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fleetid(), target);
  }

  // optional string ipAddress = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipaddress(), target);
  }

  // optional string status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // optional int64 creationTime = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_creationtime(), target);
  }

  // optional int64 terminationTime = 8 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_terminationtime(), target);
  }

  // optional int32 port = 9 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_port(), target);
  }

  // optional string playerData = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerdata().data(), static_cast<int>(this->_internal_playerdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playerdata(), target);
  }

  // optional string dnsName = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dnsname().data(), static_cast<int>(this->_internal_dnsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dnsname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return target;
}

size_t PlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string playerSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playersessionid());
    }

    // optional string playerId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string gameSessionId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string fleetId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fleetid());
    }

    // optional string ipAddress = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress());
    }

    // optional string status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status());
    }

    // optional string playerData = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerdata());
    }

    // optional string dnsName = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dnsname());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 creationTime = 7 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_creationtime());
    }

    // optional int64 terminationTime = 8 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_terminationtime());
    }

    // optional int32 port = 9 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    MergeFrom(*source);
  }
}

void PlayerSession::MergeFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playersessionid(from._internal_playersessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_fleetid(from._internal_fleetid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ipaddress(from._internal_ipaddress());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_playerdata(from._internal_playerdata());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_dnsname(from._internal_dnsname());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      creationtime_ = from.creationtime_;
    }
    if (cached_has_bits & 0x00000200u) {
      terminationtime_ = from.terminationtime_;
    }
    if (cached_has_bits & 0x00000400u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSession::CopyFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSession::IsInitialized() const {
  return true;
}

void PlayerSession::InternalSwap(PlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fleetid_.Swap(&other->fleetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerdata_.Swap(&other->playerdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dnsname_.Swap(&other->dnsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSession, port_)
      + sizeof(PlayerSession::port_)
      - PROTOBUF_FIELD_OFFSET(PlayerSession, creationtime_)>(
          reinterpret_cast<char*>(&creationtime_),
          reinterpret_cast<char*>(&other->creationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateGameSession::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateGameSession>()._has_bits_);
  static const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession(const UpdateGameSession* msg);
  static void set_has_gamesession(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_updatereason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backfillticketid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession&
UpdateGameSession::_Internal::gamesession(const UpdateGameSession* msg) {
  return *msg->gamesession_;
}
UpdateGameSession::UpdateGameSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}
UpdateGameSession::UpdateGameSession(const UpdateGameSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updatereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updatereason()) {
    updatereason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updatereason(), 
      GetArena());
  }
  backfillticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_backfillticketid()) {
    backfillticketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_backfillticketid(), 
      GetArena());
  }
  if (from._internal_has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}

void UpdateGameSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGameSession_sdk_2eproto.base);
  updatereason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesession_ = nullptr;
}

UpdateGameSession::~UpdateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateGameSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  updatereason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gamesession_;
}

void UpdateGameSession::ArenaDtor(void* object) {
  UpdateGameSession* _this = reinterpret_cast< UpdateGameSession* >(object);
  (void)_this;
}
void UpdateGameSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateGameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGameSession& UpdateGameSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void UpdateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      updatereason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      backfillticketid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gamesession_ != nullptr);
      gamesession_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateGameSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesession(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string updateReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_updatereason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string backfillTicketId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_backfillticketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGameSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gamesession(this), target, stream);
  }

  // optional string updateReason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updatereason().data(), static_cast<int>(this->_internal_updatereason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updatereason(), target);
  }

  // optional string backfillTicketId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_backfillticketid().data(), static_cast<int>(this->_internal_backfillticketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_backfillticketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return target;
}

size_t UpdateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string updateReason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_updatereason());
    }

    // optional string backfillTicketId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backfillticketid());
    }

    // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamesession_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGameSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGameSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    MergeFrom(*source);
  }
}

void UpdateGameSession::MergeFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_updatereason(from._internal_updatereason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_backfillticketid(from._internal_backfillticketid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from._internal_gamesession());
    }
  }
}

void UpdateGameSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameSession::CopyFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameSession::IsInitialized() const {
  return true;
}

void UpdateGameSession::InternalSwap(UpdateGameSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updatereason_.Swap(&other->updatereason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  backfillticketid_.Swap(&other->backfillticketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gamesession_, other->gamesession_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGameSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TerminateProcess::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminateProcess>()._has_bits_);
  static void set_has_terminationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TerminateProcess::TerminateProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}
TerminateProcess::TerminateProcess(const TerminateProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  terminationtime_ = from.terminationtime_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

void TerminateProcess::SharedCtor() {
  terminationtime_ = PROTOBUF_LONGLONG(0);
}

TerminateProcess::~TerminateProcess() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TerminateProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TerminateProcess::ArenaDtor(void* object) {
  TerminateProcess* _this = reinterpret_cast< TerminateProcess* >(object);
  (void)_this;
}
void TerminateProcess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerminateProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerminateProcess& TerminateProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerminateProcess_sdk_2eproto.base);
  return *internal_default_instance();
}


void TerminateProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminationtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 terminationTime = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_terminationtime(&has_bits);
          terminationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TerminateProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 terminationTime = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_terminationtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return target;
}

size_t TerminateProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 terminationTime = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_terminationtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerminateProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const TerminateProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerminateProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    MergeFrom(*source);
  }
}

void TerminateProcess::MergeFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_terminationtime()) {
    _internal_set_terminationtime(from._internal_terminationtime());
  }
}

void TerminateProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateProcess::CopyFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateProcess::IsInitialized() const {
  return true;
}

void TerminateProcess::InternalSwap(TerminateProcess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(terminationtime_, other->terminationtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActivateGameSession::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivateGameSession>()._has_bits_);
  static const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession(const ActivateGameSession* msg);
  static void set_has_gamesession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession&
ActivateGameSession::_Internal::gamesession(const ActivateGameSession* msg) {
  return *msg->gamesession_;
}
ActivateGameSession::ActivateGameSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}
ActivateGameSession::ActivateGameSession(const ActivateGameSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

void ActivateGameSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivateGameSession_sdk_2eproto.base);
  gamesession_ = nullptr;
}

ActivateGameSession::~ActivateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivateGameSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gamesession_;
}

void ActivateGameSession::ArenaDtor(void* object) {
  ActivateGameSession* _this = reinterpret_cast< ActivateGameSession* >(object);
  (void)_this;
}
void ActivateGameSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivateGameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivateGameSession& ActivateGameSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivateGameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void ActivateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gamesession_ != nullptr);
    gamesession_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateGameSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamesession(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivateGameSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gamesession(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return target;
}

size_t ActivateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamesession_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateGameSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateGameSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivateGameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    MergeFrom(*source);
  }
}

void ActivateGameSession::MergeFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gamesession()) {
    _internal_mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from._internal_gamesession());
  }
}

void ActivateGameSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateGameSession::CopyFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateGameSession::IsInitialized() const {
  return true;
}

void ActivateGameSession::InternalSwap(ActivateGameSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gamesession_, other->gamesession_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateGameSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessReady::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessReady>()._has_bits_);
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessReady::ProcessReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logpathstoupload_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}
ProcessReady::ProcessReady(const ProcessReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      logpathstoupload_(from.logpathstoupload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

void ProcessReady::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessReady_sdk_2eproto.base);
  port_ = 0;
}

ProcessReady::~ProcessReady() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessReady::ArenaDtor(void* object) {
  ProcessReady* _this = reinterpret_cast< ProcessReady* >(object);
  (void)_this;
}
void ProcessReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessReady& ProcessReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessReady_sdk_2eproto.base);
  return *internal_default_instance();
}


void ProcessReady::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logpathstoupload_.Clear();
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string logPathsToUpload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logpathstoupload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->_internal_logpathstoupload_size(); i < n; i++) {
    const auto& s = this->_internal_logpathstoupload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 port = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return target;
}

size_t ProcessReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logpathstoupload_.size());
  for (int i = 0, n = logpathstoupload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logpathstoupload_.Get(i));
  }

  // optional int32 port = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    MergeFrom(*source);
  }
}

void ProcessReady::MergeFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logpathstoupload_.MergeFrom(from.logpathstoupload_);
  if (from._internal_has_port()) {
    _internal_set_port(from._internal_port());
  }
}

void ProcessReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReady::CopyFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReady::IsInitialized() const {
  return true;
}

void ProcessReady::InternalSwap(ProcessReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  logpathstoupload_.InternalSwap(&other->logpathstoupload_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessEnding::_Internal {
 public:
};

ProcessEnding::ProcessEnding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}
ProcessEnding::ProcessEnding(const ProcessEnding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

void ProcessEnding::SharedCtor() {
}

ProcessEnding::~ProcessEnding() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessEnding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessEnding::ArenaDtor(void* object) {
  ProcessEnding* _this = reinterpret_cast< ProcessEnding* >(object);
  (void)_this;
}
void ProcessEnding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessEnding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessEnding& ProcessEnding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessEnding_sdk_2eproto.base);
  return *internal_default_instance();
}


void ProcessEnding::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessEnding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessEnding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return target;
}

size_t ProcessEnding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessEnding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessEnding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessEnding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    MergeFrom(*source);
  }
}

void ProcessEnding::MergeFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessEnding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEnding::CopyFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEnding::IsInitialized() const {
  return true;
}

void ProcessEnding::InternalSwap(ProcessEnding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessEnding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReportHealth::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportHealth>()._has_bits_);
  static void set_has_healthstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ReportHealth::ReportHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}
ReportHealth::ReportHealth(const ReportHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  healthstatus_ = from.healthstatus_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

void ReportHealth::SharedCtor() {
  healthstatus_ = false;
}

ReportHealth::~ReportHealth() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReportHealth::ArenaDtor(void* object) {
  ReportHealth* _this = reinterpret_cast< ReportHealth* >(object);
  (void)_this;
}
void ReportHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportHealth& ReportHealth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportHealth_sdk_2eproto.base);
  return *internal_default_instance();
}


void ReportHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  healthstatus_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool healthStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_healthstatus(&has_bits);
          healthstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool healthStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_healthstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return target;
}

size_t ReportHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  size_t total_size = 0;

  // required bool healthStatus = 1;
  if (_internal_has_healthstatus()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportHealth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportHealth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    MergeFrom(*source);
  }
}

void ReportHealth::MergeFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_healthstatus()) {
    _internal_set_healthstatus(from._internal_healthstatus());
  }
}

void ReportHealth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportHealth::CopyFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportHealth::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportHealth::InternalSwap(ReportHealth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(healthstatus_, other->healthstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportHealth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameSessionActivate::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSessionActivate>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameSessionActivate::GameSessionActivate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}
GameSessionActivate::GameSessionActivate(const GameSessionActivate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  maxplayers_ = from.maxplayers_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

void GameSessionActivate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSessionActivate_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_ = 0;
}

GameSessionActivate::~GameSessionActivate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameSessionActivate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionActivate::ArenaDtor(void* object) {
  GameSessionActivate* _this = reinterpret_cast< GameSessionActivate* >(object);
  (void)_this;
}
void GameSessionActivate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionActivate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionActivate& GameSessionActivate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSessionActivate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSessionActivate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamesessionid_.ClearNonDefaultToEmpty();
  }
  maxplayers_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionActivate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxPlayers = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maxplayers(&has_bits);
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSessionActivate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional int32 maxPlayers = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return target;
}

size_t GameSessionActivate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional int32 maxPlayers = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxplayers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionActivate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionActivate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSessionActivate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    MergeFrom(*source);
  }
}

void GameSessionActivate::MergeFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      maxplayers_ = from.maxplayers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSessionActivate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionActivate::CopyFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionActivate::IsInitialized() const {
  return true;
}

void GameSessionActivate::InternalSwap(GameSessionActivate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(maxplayers_, other->maxplayers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionActivate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameSessionTerminate::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSessionTerminate>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameSessionTerminate::GameSessionTerminate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}
GameSessionTerminate::GameSessionTerminate(const GameSessionTerminate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

void GameSessionTerminate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSessionTerminate_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameSessionTerminate::~GameSessionTerminate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameSessionTerminate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionTerminate::ArenaDtor(void* object) {
  GameSessionTerminate* _this = reinterpret_cast< GameSessionTerminate* >(object);
  (void)_this;
}
void GameSessionTerminate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSessionTerminate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionTerminate& GameSessionTerminate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSessionTerminate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSessionTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamesessionid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSessionTerminate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSessionTerminate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return target;
}

size_t GameSessionTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string gameSessionId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamesessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionTerminate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionTerminate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSessionTerminate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    MergeFrom(*source);
  }
}

void GameSessionTerminate::MergeFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gamesessionid()) {
    _internal_set_gamesessionid(from._internal_gamesessionid());
  }
}

void GameSessionTerminate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionTerminate::CopyFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionTerminate::IsInitialized() const {
  return true;
}

void GameSessionTerminate::InternalSwap(GameSessionTerminate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionTerminate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdatePlayerSessionCreationPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePlayerSessionCreationPolicy>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newplayersessioncreationpolicy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}
UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy(const UpdatePlayerSessionCreationPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newplayersessioncreationpolicy()) {
    newplayersessioncreationpolicy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newplayersessioncreationpolicy(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

void UpdatePlayerSessionCreationPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdatePlayerSessionCreationPolicy::~UpdatePlayerSessionCreationPolicy() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerSessionCreationPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlayerSessionCreationPolicy::ArenaDtor(void* object) {
  UpdatePlayerSessionCreationPolicy* _this = reinterpret_cast< UpdatePlayerSessionCreationPolicy* >(object);
  (void)_this;
}
void UpdatePlayerSessionCreationPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerSessionCreationPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerSessionCreationPolicy& UpdatePlayerSessionCreationPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerSessionCreationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      newplayersessioncreationpolicy_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerSessionCreationPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string newPlayerSessionCreationPolicy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newplayersessioncreationpolicy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerSessionCreationPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional string newPlayerSessionCreationPolicy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newplayersessioncreationpolicy().data(), static_cast<int>(this->_internal_newplayersessioncreationpolicy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newplayersessioncreationpolicy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return target;
}

size_t UpdatePlayerSessionCreationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string newPlayerSessionCreationPolicy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newplayersessioncreationpolicy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerSessionCreationPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerSessionCreationPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    MergeFrom(*source);
  }
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_newplayersessioncreationpolicy(from._internal_newplayersessioncreationpolicy());
    }
  }
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerSessionCreationPolicy::IsInitialized() const {
  return true;
}

void UpdatePlayerSessionCreationPolicy::InternalSwap(UpdatePlayerSessionCreationPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newplayersessioncreationpolicy_.Swap(&other->newplayersessioncreationpolicy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerSessionCreationPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcceptPlayerSession::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceptPlayerSession>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playersessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AcceptPlayerSession::AcceptPlayerSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}
AcceptPlayerSession::AcceptPlayerSession(const AcceptPlayerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playersessionid()) {
    playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

void AcceptPlayerSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptPlayerSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AcceptPlayerSession::~AcceptPlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptPlayerSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcceptPlayerSession::ArenaDtor(void* object) {
  AcceptPlayerSession* _this = reinterpret_cast< AcceptPlayerSession* >(object);
  (void)_this;
}
void AcceptPlayerSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptPlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptPlayerSession& AcceptPlayerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptPlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void AcceptPlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playersessionid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptPlayerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerSessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptPlayerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional string playerSessionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return target;
}

size_t AcceptPlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string playerSessionId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playersessionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptPlayerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptPlayerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptPlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    MergeFrom(*source);
  }
}

void AcceptPlayerSession::MergeFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playersessionid(from._internal_playersessionid());
    }
  }
}

void AcceptPlayerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptPlayerSession::CopyFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayerSession::IsInitialized() const {
  return true;
}

void AcceptPlayerSession::InternalSwap(AcceptPlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptPlayerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemovePlayerSession::_Internal {
 public:
  using HasBits = decltype(std::declval<RemovePlayerSession>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playersessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RemovePlayerSession::RemovePlayerSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}
RemovePlayerSession::RemovePlayerSession(const RemovePlayerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playersessionid()) {
    playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

void RemovePlayerSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemovePlayerSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemovePlayerSession::~RemovePlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovePlayerSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemovePlayerSession::ArenaDtor(void* object) {
  RemovePlayerSession* _this = reinterpret_cast< RemovePlayerSession* >(object);
  (void)_this;
}
void RemovePlayerSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovePlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePlayerSession& RemovePlayerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void RemovePlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playersessionid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePlayerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerSessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePlayerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional string playerSessionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return target;
}

size_t RemovePlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string playerSessionId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playersessionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePlayerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePlayerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    MergeFrom(*source);
  }
}

void RemovePlayerSession::MergeFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playersessionid(from._internal_playersessionid());
    }
  }
}

void RemovePlayerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerSession::CopyFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerSession::IsInitialized() const {
  return true;
}

void RemovePlayerSession::InternalSwap(RemovePlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePlayerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DescribePlayerSessionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DescribePlayerSessionsRequest>()._has_bits_);
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playersessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playersessionstatusfilter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nexttoken(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}
DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playerid()) {
    playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playerid(), 
      GetArena());
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playersessionid()) {
    playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersessionid(), 
      GetArena());
  }
  playersessionstatusfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playersessionstatusfilter()) {
    playersessionstatusfilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersessionstatusfilter(), 
      GetArena());
  }
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nexttoken()) {
    nexttoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nexttoken(), 
      GetArena());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

DescribePlayerSessionsRequest::~DescribePlayerSessionsRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribePlayerSessionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsRequest::ArenaDtor(void* object) {
  DescribePlayerSessionsRequest* _this = reinterpret_cast< DescribePlayerSessionsRequest* >(object);
  (void)_this;
}
void DescribePlayerSessionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribePlayerSessionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsRequest& DescribePlayerSessionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gamesessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      playersessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      playersessionstatusfilter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      nexttoken_.ClearNonDefaultToEmpty();
    }
  }
  limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribePlayerSessionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gameSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerSessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string playerSessionStatusFilter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_playersessionstatusfilter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nextToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nexttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 limit = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribePlayerSessionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gamesessionid(), target);
  }

  // optional string playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playerid(), target);
  }

  // optional string playerSessionId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playersessionid(), target);
  }

  // optional string playerSessionStatusFilter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playersessionstatusfilter().data(), static_cast<int>(this->_internal_playersessionstatusfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playersessionstatusfilter(), target);
  }

  // optional string nextToken = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nexttoken().data(), static_cast<int>(this->_internal_nexttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nexttoken(), target);
  }

  // optional int32 limit = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return target;
}

size_t DescribePlayerSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gameSessionId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional string playerId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playerid());
    }

    // optional string playerSessionId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playersessionid());
    }

    // optional string playerSessionStatusFilter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_playersessionstatusfilter());
    }

    // optional string nextToken = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nexttoken());
    }

    // optional int32 limit = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribePlayerSessionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsRequest::MergeFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_playerid(from._internal_playerid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_playersessionid(from._internal_playersessionid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_playersessionstatusfilter(from._internal_playersessionstatusfilter());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_nexttoken(from._internal_nexttoken());
    }
    if (cached_has_bits & 0x00000020u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DescribePlayerSessionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsRequest::CopyFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsRequest::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsRequest::InternalSwap(DescribePlayerSessionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  playersessionstatusfilter_.Swap(&other->playersessionstatusfilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nexttoken_.Swap(&other->nexttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribePlayerSessionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BackfillMatchmakingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackfillMatchmakingRequest>()._has_bits_);
  static void set_has_ticketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamesessionarn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchmakingconfigurationarn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackfillMatchmakingRequest::BackfillMatchmakingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}
BackfillMatchmakingRequest::BackfillMatchmakingRequest(const BackfillMatchmakingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticketid()) {
    ticketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticketid(), 
      GetArena());
  }
  gamesessionarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionarn()) {
    gamesessionarn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionarn(), 
      GetArena());
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_matchmakingconfigurationarn()) {
    matchmakingconfigurationarn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matchmakingconfigurationarn(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}

void BackfillMatchmakingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackfillMatchmakingRequest_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackfillMatchmakingRequest::~BackfillMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BackfillMatchmakingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingRequest::ArenaDtor(void* object) {
  BackfillMatchmakingRequest* _this = reinterpret_cast< BackfillMatchmakingRequest* >(object);
  (void)_this;
}
void BackfillMatchmakingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackfillMatchmakingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackfillMatchmakingRequest& BackfillMatchmakingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackfillMatchmakingRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void BackfillMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ticketid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamesessionarn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      matchmakingconfigurationarn_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackfillMatchmakingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ticketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameSessionArn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gamesessionarn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string matchmakingConfigurationArn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_matchmakingconfigurationarn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackfillMatchmakingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ticketId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticketid().data(), static_cast<int>(this->_internal_ticketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticketid(), target);
  }

  // optional string gameSessionArn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionarn().data(), static_cast<int>(this->_internal_gamesessionarn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gamesessionarn(), target);
  }

  // optional string matchmakingConfigurationArn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchmakingconfigurationarn().data(), static_cast<int>(this->_internal_matchmakingconfigurationarn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_matchmakingconfigurationarn(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return target;
}

size_t BackfillMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ticketId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticketid());
    }

    // optional string gameSessionArn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionarn());
    }

    // optional string matchmakingConfigurationArn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchmakingconfigurationarn());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackfillMatchmakingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackfillMatchmakingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingRequest::MergeFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticketid(from._internal_ticketid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamesessionarn(from._internal_gamesessionarn());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_matchmakingconfigurationarn(from._internal_matchmakingconfigurationarn());
    }
  }
}

void BackfillMatchmakingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingRequest::CopyFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingRequest::IsInitialized() const {
  return true;
}

void BackfillMatchmakingRequest::InternalSwap(BackfillMatchmakingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ticketid_.Swap(&other->ticketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamesessionarn_.Swap(&other->gamesessionarn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BackfillMatchmakingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopMatchmakingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StopMatchmakingRequest>()._has_bits_);
  static void set_has_ticketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamesessionarn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchmakingconfigurationarn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StopMatchmakingRequest::StopMatchmakingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}
StopMatchmakingRequest::StopMatchmakingRequest(const StopMatchmakingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticketid()) {
    ticketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticketid(), 
      GetArena());
  }
  gamesessionarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionarn()) {
    gamesessionarn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionarn(), 
      GetArena());
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_matchmakingconfigurationarn()) {
    matchmakingconfigurationarn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matchmakingconfigurationarn(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}

void StopMatchmakingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopMatchmakingRequest_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopMatchmakingRequest::~StopMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopMatchmakingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopMatchmakingRequest::ArenaDtor(void* object) {
  StopMatchmakingRequest* _this = reinterpret_cast< StopMatchmakingRequest* >(object);
  (void)_this;
}
void StopMatchmakingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopMatchmakingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopMatchmakingRequest& StopMatchmakingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopMatchmakingRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void StopMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ticketid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamesessionarn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      matchmakingconfigurationarn_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopMatchmakingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ticketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gameSessionArn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gamesessionarn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string matchmakingConfigurationArn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_matchmakingconfigurationarn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopMatchmakingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ticketId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticketid().data(), static_cast<int>(this->_internal_ticketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticketid(), target);
  }

  // optional string gameSessionArn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionarn().data(), static_cast<int>(this->_internal_gamesessionarn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gamesessionarn(), target);
  }

  // optional string matchmakingConfigurationArn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchmakingconfigurationarn().data(), static_cast<int>(this->_internal_matchmakingconfigurationarn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_matchmakingconfigurationarn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return target;
}

size_t StopMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ticketId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticketid());
    }

    // optional string gameSessionArn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionarn());
    }

    // optional string matchmakingConfigurationArn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchmakingconfigurationarn());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopMatchmakingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopMatchmakingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopMatchmakingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    MergeFrom(*source);
  }
}

void StopMatchmakingRequest::MergeFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticketid(from._internal_ticketid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamesessionarn(from._internal_gamesessionarn());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_matchmakingconfigurationarn(from._internal_matchmakingconfigurationarn());
    }
  }
}

void StopMatchmakingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMatchmakingRequest::CopyFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMatchmakingRequest::IsInitialized() const {
  return true;
}

void StopMatchmakingRequest::InternalSwap(StopMatchmakingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticketid_.Swap(&other->ticketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamesessionarn_.Swap(&other->gamesessionarn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopMatchmakingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetInstanceCertificate::_Internal {
 public:
};

GetInstanceCertificate::GetInstanceCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}
GetInstanceCertificate::GetInstanceCertificate(const GetInstanceCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

void GetInstanceCertificate::SharedCtor() {
}

GetInstanceCertificate::~GetInstanceCertificate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInstanceCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetInstanceCertificate::ArenaDtor(void* object) {
  GetInstanceCertificate* _this = reinterpret_cast< GetInstanceCertificate* >(object);
  (void)_this;
}
void GetInstanceCertificate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInstanceCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceCertificate& GetInstanceCertificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstanceCertificate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInstanceCertificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstanceCertificate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return target;
}

size_t GetInstanceCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceCertificate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstanceCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    MergeFrom(*source);
  }
}

void GetInstanceCertificate::MergeFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInstanceCertificate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificate::CopyFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificate::IsInitialized() const {
  return true;
}

void GetInstanceCertificate::InternalSwap(GetInstanceCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstanceCertificate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BackfillMatchmakingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BackfillMatchmakingResponse>()._has_bits_);
  static void set_has_ticketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackfillMatchmakingResponse::BackfillMatchmakingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}
BackfillMatchmakingResponse::BackfillMatchmakingResponse(const BackfillMatchmakingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticketid()) {
    ticketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}

void BackfillMatchmakingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackfillMatchmakingResponse_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackfillMatchmakingResponse::~BackfillMatchmakingResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BackfillMatchmakingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingResponse::ArenaDtor(void* object) {
  BackfillMatchmakingResponse* _this = reinterpret_cast< BackfillMatchmakingResponse* >(object);
  (void)_this;
}
void BackfillMatchmakingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackfillMatchmakingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackfillMatchmakingResponse& BackfillMatchmakingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackfillMatchmakingResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void BackfillMatchmakingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticketid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackfillMatchmakingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ticketId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackfillMatchmakingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ticketId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticketid().data(), static_cast<int>(this->_internal_ticketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return target;
}

size_t BackfillMatchmakingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ticketId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackfillMatchmakingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackfillMatchmakingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingResponse::MergeFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticketid()) {
    _internal_set_ticketid(from._internal_ticketid());
  }
}

void BackfillMatchmakingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingResponse::CopyFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingResponse::IsInitialized() const {
  return true;
}

void BackfillMatchmakingResponse::InternalSwap(BackfillMatchmakingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticketid_.Swap(&other->ticketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BackfillMatchmakingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DescribePlayerSessionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DescribePlayerSessionsResponse>()._has_bits_);
  static void set_has_nexttoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playersessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}
DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      playersessions_(from.playersessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nexttoken()) {
    nexttoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nexttoken(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base);
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DescribePlayerSessionsResponse::~DescribePlayerSessionsResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribePlayerSessionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nexttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsResponse::ArenaDtor(void* object) {
  DescribePlayerSessionsResponse* _this = reinterpret_cast< DescribePlayerSessionsResponse* >(object);
  (void)_this;
}
void DescribePlayerSessionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribePlayerSessionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsResponse& DescribePlayerSessionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nexttoken_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribePlayerSessionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string nextToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nexttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playersessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribePlayerSessionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string nextToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nexttoken().data(), static_cast<int>(this->_internal_nexttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nexttoken(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playersessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playersessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return target;
}

size_t DescribePlayerSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  total_size += 1UL * this->_internal_playersessions_size();
  for (const auto& msg : this->playersessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string nextToken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nexttoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribePlayerSessionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsResponse::MergeFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersessions_.MergeFrom(from.playersessions_);
  if (from._internal_has_nexttoken()) {
    _internal_set_nexttoken(from._internal_nexttoken());
  }
}

void DescribePlayerSessionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsResponse::CopyFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsResponse::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsResponse::InternalSwap(DescribePlayerSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playersessions_.InternalSwap(&other->playersessions_);
  nexttoken_.Swap(&other->nexttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribePlayerSessionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetInstanceCertificateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInstanceCertificateResponse>()._has_bits_);
  static void set_has_certificatepath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_certificatechainpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privatekeypath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GetInstanceCertificateResponse::GetInstanceCertificateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}
GetInstanceCertificateResponse::GetInstanceCertificateResponse(const GetInstanceCertificateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  certificatepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_certificatepath()) {
    certificatepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_certificatepath(), 
      GetArena());
  }
  certificatechainpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_certificatechainpath()) {
    certificatechainpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_certificatechainpath(), 
      GetArena());
  }
  privatekeypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_privatekeypath()) {
    privatekeypath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privatekeypath(), 
      GetArena());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}

void GetInstanceCertificateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstanceCertificateResponse_sdk_2eproto.base);
  certificatepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetInstanceCertificateResponse::~GetInstanceCertificateResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInstanceCertificateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  certificatepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInstanceCertificateResponse::ArenaDtor(void* object) {
  GetInstanceCertificateResponse* _this = reinterpret_cast< GetInstanceCertificateResponse* >(object);
  (void)_this;
}
void GetInstanceCertificateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInstanceCertificateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceCertificateResponse& GetInstanceCertificateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstanceCertificateResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceCertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      certificatepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      certificatechainpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      privatekeypath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hostname_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInstanceCertificateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string certificatePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_certificatepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string certificateChainPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_certificatechainpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string privateKeyPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_privatekeypath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hostName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstanceCertificateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string certificatePath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_certificatepath().data(), static_cast<int>(this->_internal_certificatepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_certificatepath(), target);
  }

  // optional string certificateChainPath = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_certificatechainpath().data(), static_cast<int>(this->_internal_certificatechainpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_certificatechainpath(), target);
  }

  // optional string privateKeyPath = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_privatekeypath().data(), static_cast<int>(this->_internal_privatekeypath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_privatekeypath(), target);
  }

  // optional string hostName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return target;
}

size_t GetInstanceCertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string certificatePath = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_certificatepath());
    }

    // optional string certificateChainPath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_certificatechainpath());
    }

    // optional string privateKeyPath = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_privatekeypath());
    }

    // optional string hostName = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceCertificateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstanceCertificateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    MergeFrom(*source);
  }
}

void GetInstanceCertificateResponse::MergeFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_certificatepath(from._internal_certificatepath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_certificatechainpath(from._internal_certificatechainpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_privatekeypath(from._internal_privatekeypath());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hostname(from._internal_hostname());
    }
  }
}

void GetInstanceCertificateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificateResponse::CopyFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificateResponse::IsInitialized() const {
  return true;
}

void GetInstanceCertificateResponse::InternalSwap(GetInstanceCertificateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  certificatepath_.Swap(&other->certificatepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  certificatechainpath_.Swap(&other->certificatechainpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  privatekeypath_.Swap(&other->privatekeypath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstanceCertificateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
